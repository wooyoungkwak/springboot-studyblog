configurations {
    all {
        // springboot 자체 logging 프로임워크 제외
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext['spring-security.version']='5.6.2'

dependencies {

    // development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // security
//    implementation "org.springframework.boot:spring-boot-starter-security"

    // jsp ( add jstl and stripes )
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'javax.servlet:jstl'
    implementation 'net.sourceforge.stripes:stripes:1.5.8'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // queryDSL
    implementation 'com.querydsl:querydsl-jpa'

    // mybatis
//    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'

    // java jdbc driver (mssql)
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'

    // log4js (logging 프레임워크)
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    /* util */
    // guava
    implementation group: 'com.google.guava', name: 'guava', version: '11.0.2'

    // lombok
    compileOnly 'org.projectlombok:lombok'

    // jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // java util
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    // Excel
    implementation 'org.apache.poi:poi:5.2.2'
    implementation 'org.apache.poi:poi-ooxml:5.2.2'

    // jxls for Excel Control
    implementation 'org.jxls:jxls-poi:2.11.0'
    implementation 'org.jxls:jxls-jexcel:1.0.9'
    implementation 'org.jxls:jxls:2.11.0'

    /* processor */
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor 'javax.persistence:javax.persistence-api'
    // java.lang.NoClassDefFoundError(javax.annotation.Generated) 발생 대응
    annotationProcessor 'javax.annotation:javax.annotation-api'
    // Querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"

}

// war 배포시 내장용 tomcat 사용 여부
bootWar.enabled=false

// war 배포시 외장용 tomcat 사용 여부
war {
    archiveName 'ROOT.war'
    enabled=true
}

// make Web Directory Template
task initWebProject (dependsOn: ['createYML', 'createLog4j'], description: "initialize Web Project") {

    doLast {
        [webAppDir, new File(webAppDir, '/WEB-INF') , new File(webAppDir, '/WEB-INF/views'),new File(webAppDir, '/WEB-INF/views/controller'), new File(webAppDir, '/WEB-INF/tags'),
         new File(webAppDir, '/WEB-INF/views/controller/home'),new File(webAppDir, '/WEB-INF/views/controller/error'),new File(webAppDir, '/WEB-INF/views/layout'),
         new File(webAppDir, '/WEB-INF/views/reference'),new File(webAppDir, '/resources'),
         new File(webAppDir, '/resources/js'),new File(webAppDir, '/resources/css'), new File(webAppDir, '/resources/assets')].each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }

        sourceSets.main.java.srcDirs.each {
            String rootDir = it.toString().replace('[', '').replace(']', '')
            String packageDir = this.group.toString().replace('.', '\\')
            String javaDir = rootDir + '\\' + packageDir + '\\' + this.name

            [new File(javaDir, '/controller') , new File(javaDir, '/exception'), new File(javaDir, '/aop'), new File(javaDir, '/interceptor'),
             new File(javaDir, '/model'),new File(javaDir, '/security')].each {
                if (!it.exists()) it.mkdirs()
            }
        }
    }
}

// create log4j.xml file
task createLog4j {
    doLast {
        String content = '<?xml version="1.0" encoding="UTF-8"?>\n' +
                '<Configuration status="INFO">\n' +
                '\n' +
                '    <Properties>\n' +
                '        <Property name="PROFILE">home</Property>\n' +
                '        <Property name="LOG_PACKAGE_USER">com.young</Property>\n' +
                '        <Property name="LOG_PACKAGE_SPRINGBOOT">org.springframework</Property>\n' +
                '        <Property name="LOG_DIR">.log</Property>\n' +
                '        <Property name="LOG_NAME">log4j2</Property>\n' +
                '        <Property name="LOG_PATTERN">%d{hh:mm:ss} %-5level [%thread] %logger : %msg%n</Property>\n' +
                '    </Properties>\n' +
                '\n' +
                '    <Appenders>\n' +
                '        <!--\n' +
                '            name : tag 를 정의하는 이름\n' +
                '            target : INFO, DEBUG, WARN, ERROR\n' +
                '            fileName : 저장할 파일의 이름 (경로 와 이름 )\n' +
                '            filePattern : 저장할 파일의 이름 ( rolling file 의 경우 policies 에 따른 파일 이름 패턴 정의 )\n' +
                '            interval : filePattern 에 따라 시간이 1분, 1시간, 1일 단위 지정됨\n' +
                '            fileIndex : 로그 파일이 저장되는 갯수의 최대 또는 최소를 지정 ( max or min)\n' +
                '            max : 로크 파일 생성 최대 개수 지정 (기본 값은 7 - 7 초과 설정 불가)\n' +
                '            min : 로크 파일 생성 최대 개수 지정 (기본 값은 1 - 1 미만 설정 불가)\n' +
                '        -->\n' +
                '\n' +
                '        <Console name="console" target="SYSTEM_OUT">\n' +
                '            <PatternLayout pattern="${LOG_PATTERN}"/>\n' +
                '        </Console>\n' +
                '\n' +
                '        <RollingFile name="file" fileName="${LOG_DIR}/${LOG_NAME}.log" filePattern="${LOG_DIR}/${LOG_NAME}_%d{yyyy-MM-dd-hh}.log">\n' +
                '            <PatternLayout pattern="${LOG_PATTERN}"/>\n' +
                '            <Policies>\n' +
                '                <!-- 시간별 로그 파일 생성-->\n' +
                '                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>\n' +
                '                <!-- 크기 로그 파일 생성-->\n' +
                '                <SizeBasedTriggeringPolicy size="50MB" />\n' +
                '            </Policies>\n' +
                '            <!-- 롤링 파일 5개 까지 생성 -->\n' +
                '            <DefaultRolloverStrategy max="5" fileIndex="min"/>\n' +
                '        </RollingFile>\n' +
                '\n' +
                '    </Appenders>\n' +
                '\n' +
                '    <Loggers>\n' +
                '\n' +
                '        <!--\n' +
                '            level : INFO, DEBUG, WARN, ERROR\n' +
                '            additivity :\n' +
                '            name : 로그 정보를 만들 패키지 이름\n' +
                '        -->\n' +
                '        <!-- Root Logger -->\n' +
                '        <Root level="INFO" additivity="false">\n' +
                '            <AppenderRef ref="console"/>\n' +
                '            <AppenderRef ref="file"/>\n' +
                '        </Root>\n' +
                '\n' +
                '        <!-- 스프링 프레임워크에서 찍는건 level을 info로 설정 -->\n' +
                '        <Logger name="${LOG_PACKAGE_SPRINGBOOT}" additivity="false">\n' +
                '            <AppenderRef ref="console"/>\n' +
                '            <AppenderRef ref="file" level="INFO"/>\n' +
                '            <AppenderRef ref="errorFile" level="ERROR"/>\n' +
                '        </Logger>\n' +
                '\n' +
                '        <!-- rolling file에는 debug, console에는 info 분리하여 처리 가능하다. -->\n' +
                '        <Logger name="${LOG_PACKAGE_USER}" additivity="false">\n' +
                '            <AppenderRef ref="console"/>\n' +
                '            <AppenderRef ref="file" level="INFO"/>\n' +
                '        </Logger>\n' +
                '\n' +
                '    </Loggers>\n' +
                '</Configuration>';

        sourceSets.main.java.srcDirs.each {
            String absoluteDir = it.getPath()
            [new File(absoluteDir, '../resources/log4j2.xml' )].each {
                if (!it.exists()) {
                    it.createNewFile()
                    File configFile = file(it)
                    configFile.write content
                }
            }
        }
    }
}

// create application.yml file
task createYML {
    doLast {
        String content = "spring:\n" +
                "  mvc:\n" +
                "    view:\n" +
                "      prefix: /WEB-INF/views\n" +
                "      suffix: .jsp\n" +
                "  devtools:\n" +
                "    livereload:\n" +
                "      enabled: true\n" +
                "  jpa:\n" +
                "    show-sql: true\n" +
                "    hibernate:\n" +
                "      ddl-auto: none\n" +
                "      naming:\n" +
                "        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\n" +
                "      use-new-id-generator-mappings: false\n" +
                "  security:\n" +
                "    user:\n" +
                "      name: admin\n" +
                "      password: qwer1234\n" +
                "      roles: ADMIN\n" +
                "logging:\n" +
                "  config: classpath:log4j2.xml\n" +
                "debug: false\n" +
                "#server:\n" +
                "#  error:\n" +
                "#    path: \"/404\"\n" +
                "---\n" +
                "# debug\n" +
                "spring:\n" +
                "  config:\n" +
                "    activate:\n" +
                "      on-profile: debug\n" +
                "  jpa:\n" +
                "    database-platform: org.hibernate.dialect.SQLServer2012Dialect\n" +
                "  datasource:\n" +
                "    url: jdbc:sqlserver://localhost;databaseName=sarangbang;trustServerCertificate=true;encrypt=true;\n" +
                "    username: sa\n" +
                "    password: rudnf12dnjf\n" +
                "server:\n" +
                "  port: 8080\n" +
                "  servlet:\n" +
                "    context-path: /\n" +
                "    session:\n" +
                "      timeout: 300m\n" +
                "---\n" +
                "# mysql (mariadb)\n" +
                "spring:\n" +
                "  config:\n" +
                "    activate:\n" +
                "      on-profile: mysql\n" +
                "  jpa:\n" +
                "    database-platform: ??\n" +
                "  datasource:\n" +
                "    url: ??\n" +
                "    username: sa\n" +
                "    password: rudnf12dnjf\n" +
                "server:\n" +
                "  port: 80\n" +
                "  servlet:\n" +
                "    context-path: /\n" +
                "    session:\n" +
                "      timeout: 30m\n" +
                "---\n" +
                "# mssql\n" +
                "spring:\n" +
                "  config:\n" +
                "    activate:\n" +
                "      on-profile: mssql\n" +
                "  jpa:\n" +
                "    database-platform: org.hibernate.dialect.SQLServer2012Dialect\n" +
                "  datasource:\n" +
                "    url: jdbc:sqlserver://localhost;databaseName=sarangbang;trustServerCertificate=true;encrypt=true;\n" +
                "    username: sa\n" +
                "    password: rudnf12dnjf\n" +
                "server:\n" +
                "  port: 80\n" +
                "  servlet:\n" +
                "    context-path: /\n" +
                "    session:\n" +
                "      timeout: 30m";

        sourceSets.main.java.srcDirs.each {
            String absoluteDir = it.getPath()
            [new File(absoluteDir, '../resources/application.yml' )].each {
                if (!it.exists()) {
                    it.createNewFile()
                    File configFile = file(it)
                    configFile.write content
                }
            }

            [new File(absoluteDir, '../resources/application.properties' )].each {
                if (it.exists()) {
                    it.delete()
                }
            }
        }

    }

}